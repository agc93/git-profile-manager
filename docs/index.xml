<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git Profile Manager â€“ Git Profile Manager</title><link>/docs/</link><description>Recent content on Git Profile Manager</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: GPM Installation</title><link>/docs/getting-started/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/getting-started/installation/</guid><description>
&lt;p>Installing Git Profile Manager is simple and easy, and supports a huge range of platforms.&lt;/p>
&lt;p>Currently installers are provided for: Windows 10, Ubuntu (18.04), RPM-based Linux distros and Debian/Ubuntu.&lt;/p>
&lt;p>You can also manually install on any of the above, as well as macOS (unsupported).&lt;/p>
&lt;h2 id="net-core-global-tool">.NET Core Global Tool&lt;/h2>
&lt;p>GPM is now also shipped as a .NET Core &lt;em>Global Tool&lt;/em>. This means, you can run the following command to install GPM and the .NET Core CLI should make the &lt;code>gpm&lt;/code> command available in your environment.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dotnet tool install -g git-profile-manager
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that it&amp;rsquo;s possible (especially on non-Windows platforms) that the global .NET Core tools location is not on your &lt;code>PATH&lt;/code> so you may need to manually add it (or just install GPM using one of the below methods).&lt;/p>
&lt;h2 id="linux">Linux&lt;/h2>
&lt;h3 id="debian-ubuntu">Debian, Ubuntu&lt;/h3>
&lt;p>First, you need to install some dependencies:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># for Debian 8&lt;/span>
apt-get install -y libicu52 libunwind8
&lt;span style="color:#8f5902;font-style:italic"># for Ubuntu 18.04&lt;/span>
apt-get install -y libicu55 libunwind8
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, just download the &lt;code>deb&lt;/code> for your distro and install it with:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dpkg -i git-profile-manager*.deb
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will install the app to &lt;code>/usr/lib/git-profile-manager&lt;/code> and automatically add &lt;code>gpm&lt;/code> to your &lt;code>PATH&lt;/code>.&lt;/p>
&lt;p>Just run &lt;code>gpm&lt;/code> to get the help.&lt;/p>
&lt;h3 id="fedora">Fedora&lt;/h3>
&lt;p>Download the &lt;code>rpm&lt;/code> for Fedora and install it with:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dnf install git-profile-manager*.rpm
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Despite the naming, this package should work fine for most modern Fedora versions&lt;/p>
&lt;/blockquote>
&lt;p>This will install the app to &lt;code>/usr/lib/git-profile-manager&lt;/code> and automatically add &lt;code>gpm&lt;/code> to your &lt;code>PATH&lt;/code>.&lt;/p>
&lt;p>Just run &lt;code>gpm&lt;/code> to get the help.&lt;/p>
&lt;h3 id="rhel-centos">RHEL, CentOS&lt;/h3>
&lt;p>First, install dependencies:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">yum install -y libicu libunwind
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, download the &lt;code>rpm&lt;/code> for your flavour and install it with:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">rpm -i git-profile-manager*.rpm
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will install the app to &lt;code>/usr/lib/git-profile-manager&lt;/code> and automatically add &lt;code>gpm&lt;/code> to your &lt;code>PATH&lt;/code>.&lt;/p>
&lt;p>Just run &lt;code>gpm&lt;/code> to get the help.&lt;/p>
&lt;h2 id="windows">Windows&lt;/h2>
&lt;p>Chocolatey users can quickly install Git Profile Manager using the &lt;code>git-profile-manager.install&lt;/code> package:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="color:#000">choco&lt;/span> &lt;span style="color:#000">install&lt;/span> &lt;span style="color:#000">git-profile-manager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">install&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will install the app to the default Chocolatey location and should automatically add a &lt;code>gpm&lt;/code> alias to your PATH.&lt;/p>
&lt;blockquote>
&lt;p>You can also download the release package, extract it somewhere and add that location to your &lt;code>PATH&lt;/code> manually.&lt;/p>
&lt;/blockquote>
&lt;p>Just run &lt;code>gpm&lt;/code> to get the help.&lt;/p>
&lt;h2 id="macos">macOS&lt;/h2>
&lt;p>At this time, there is no automated install available for macOS (since building for macOS requires a Mac and I don&amp;rsquo;t have one).&lt;/p>
&lt;p>MacOS users can download the relevant archive, extract it to a directory (say &lt;code>/Applications/git-profile-manager&lt;/code> for example) and add that folder to your &lt;code>PATH&lt;/code>. You can then run &lt;code>gpm&lt;/code> from a terminal to run the app.&lt;/p>
&lt;blockquote>
&lt;p>Note that the macOS version is largely untested and may be somewhat unstable. Please report issues and bugs on GitHub.&lt;/p>
&lt;/blockquote>
&lt;h2 id="net-runtime">.NET Runtime&lt;/h2>
&lt;p>If you&amp;rsquo;re on another platform, GPM &lt;em>might&lt;/em> still work! If you can install the .NET Core runtime on your system (this is bundled with the SDK if you&amp;rsquo;re on a supported OS), you should be able to use it to run GPM from the &lt;code>dotnet-any&lt;/code> package. The main executable is the &lt;code>git-profile-manager.dll&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dotnet git-profile-manager.dll
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Usage</title><link>/docs/getting-started/usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/getting-started/usage/</guid><description>
&lt;h2 id="getting-help">Getting help&lt;/h2>
&lt;p>You can always run &lt;code>gpm --help&lt;/code> to get info on the top-level commands available. Note that each command also has it&amp;rsquo;s own &lt;code>--help&lt;/code> option for easy assistance.&lt;/p>
&lt;h2 id="activate">Activate&lt;/h2>
&lt;p>The activate command is the essential command for &lt;code>gpm&lt;/code>. Activating a profile automatically applies all configuration options stored in the profile, applied to the current repository.&lt;/p>
&lt;p>You can also add the &lt;code>-g&lt;/code> or &lt;code>--global&lt;/code> flag to apply a profile globally (use with care).&lt;/p>
&lt;h4 id="example">Example&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gpm activate work-profile
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="deactivate">Deactivate&lt;/h2>
&lt;p>Deactivate is the opposite of activate and will unset any configuration options stored in the profile. Like &lt;code>activate&lt;/code>, this applies to the current repository by default, but the &lt;code>--global&lt;/code> flag will unset these items globally (use with &lt;strong>&lt;em>extreme&lt;/em> caution&lt;/strong>).&lt;/p>
&lt;h4 id="example-1">Example&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gpm deactivate my-oss-project
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="profile">Profile&lt;/h2>
&lt;p>The profile command is used to managed saved Git profiles, and includes a number of subcommands.&lt;/p>
&lt;h3 id="create">Create&lt;/h3>
&lt;p>Create will create a new profile. By default, this profile is blank (i.e. includes no configuration options), but you can optionally provide a source profile for GPM to duplicate.&lt;/p>
&lt;h4 id="example-2">Example&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gpm profile create --from personal work
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="delete">Delete&lt;/h3>
&lt;p>Delete will delete the specified profile from your saved profiles completely. By default, you will be prompted to perform this command, but this can be skipped using the &lt;code>--non-interactive&lt;/code> option.&lt;/p>
&lt;h4 id="example-3">Example&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gpm profile delete work-profile
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="edit">Edit&lt;/h3>
&lt;p>Edit allows you to edit already existing profiles (i.e. to add new configuration options to a profile). The profile will be created if it doesn&amp;rsquo;t exist.&lt;/p>
&lt;p>Configuration options are specified as key-value pairs, similar to &lt;code>git config&lt;/code>, separated by an &amp;lsquo;&lt;code>=&lt;/code>&amp;rsquo; symbol. You can remove a configuration option using the &lt;code>--rm&lt;/code> option&lt;/p>
&lt;h4 id="example-4">Example&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gpm profile edit work-profile commit.gpgsign&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">true&lt;/span>
gpm profile edit work-profile gpg.signingkey&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>123ABCDEF --rm
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="export">Export&lt;/h3>
&lt;p>If you&amp;rsquo;d like to use your profiles outside of Git Profile Manager, you can use this option to export your profile into a file you can then copy/run/move as you see fit. The exported file is a plain text file with all the &lt;code>git config&lt;/code> commands for your profile, one command per line.&lt;/p>
&lt;p>This file can then be run (through Bash or PowerShell) or used however you like.&lt;/p>
&lt;h4 id="example-5">Example&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gpm profile &lt;span style="color:#204a87">export&lt;/span> work-profile command-file.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="import">Import&lt;/h3>
&lt;p>The opposite operation to export, import accepts a simple command file and creates a profile from it. GPM will read through the input file and create a profile with all of the Git configuration items found in the file. As such, this can be used to import not just from exported GPM profiles, but also from simple shell scripts you may already be using.&lt;/p>
&lt;p>The new profile will be named with the input file&amp;rsquo;s name, or this can be overriden with the &lt;code>--profile-name&lt;/code> option.&lt;/p>
&lt;blockquote>
&lt;p>The file parsing logic in GPM is quite &amp;ldquo;dumb&amp;rdquo; so it will not, for example, process any of the logic contained in the command file.&lt;/p>
&lt;/blockquote>
&lt;h4 id="example-6">Example&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gpm profile import path/to/file.sh -n new-profile
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="list">List&lt;/h3>
&lt;p>The list command simply lists all the currently saved Git profiles (from the user&amp;rsquo;s &lt;code>~/.gitprofile&lt;/code>).&lt;/p>
&lt;h4 id="example-7">Example&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">gpm profile list
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Profiles</title><link>/docs/getting-started/profiles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/getting-started/profiles/</guid><description>
&lt;h2 id="whats-in-a-profile">What&amp;rsquo;s in a profile?&lt;/h2>
&lt;p>Essentially a Git &amp;ldquo;profile&amp;rdquo; is just a collection of configuration key-value pairs. For example &lt;code>commit.gpgsign=true&lt;/code> is a single configuration item as is &lt;code>user.name=&amp;quot;Alistair Chapman&amp;quot;&lt;/code>.&lt;/p>
&lt;h2 id="can-multiple-profiles-be-active">Can multiple profiles be active?&lt;/h2>
&lt;p>Absolutely! Since profiles are just a configuration collection, you can activate as many profiles as you want! Note that profiles you activate will overwrite any previous configuration values so start generic and go specific.&lt;/p>
&lt;p>You can also duplicate profiles by creating a new profile and using the &lt;code>--from&lt;/code> option to specify an existing profile. You can then edit your new profile without affecting the old one.&lt;/p>
&lt;h2 id="where-are-they">Where are they?&lt;/h2>
&lt;p>GPM stores profiles in a file in your home directory called &lt;code>.gitprofiles&lt;/code>. Linux and macOS users may need to show hidden files in their file manager before it&amp;rsquo;s visible.&lt;/p>
&lt;p>This file is in YAML format and stores each profile as a named key with the configuration items included right in the file.&lt;/p>
&lt;blockquote>
&lt;p>If you need to perform bulk editing, you can always directly edit &lt;code>~/.gitprofiles&lt;/code>. GPM doesn&amp;rsquo;t mind.&lt;/p>
&lt;/blockquote>
&lt;h2 id="how-do-i-createeditdelete-profiles">How do I create/edit/delete profiles?&lt;/h2>
&lt;p>Profiles can be managed using the &lt;code>gpm profile&lt;/code> command and all of its subcommands, detailed in full in the &lt;a href="../docs/getting-started/usage">usage documentation&lt;/a>.&lt;/p></description></item><item><title>Docs: Frequently Asked Questions</title><link>/docs/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/faq/</guid><description>
&lt;h3 id="but-why">But, why?&lt;/h3>
&lt;p>In short, because I could.&lt;/p>
&lt;p>In reality, this tool was originally designed as a simple example of a command-line app to demonstrate .NET Core native publishing, Docker in Cake builds and using Spectre.Cli in CLI apps. As it turns out, I found the app pretty handy and since I&amp;rsquo;d already put the work in, it made sense to publish it.&lt;/p>
&lt;h3 id="what-platforms-are-supported">What platforms are supported?&lt;/h3>
&lt;p>Theoretically, Git Profile Manager is supported anywhere .NET Core is.&lt;/p>
&lt;p>If you already have the .NET Core runtime (i.e. &lt;code>dotnet&lt;/code>), then you can run GPM.&lt;/p>
&lt;p>Even if you don&amp;rsquo;t have .NET Core installed, we build packages for Windows, macOS, RHEL/Fedora/CentOS, and Debian/Ubuntu.&lt;/p>
&lt;h3 id="cant-you-do-the-same-thing-as-this-tool-with-shell-scripts">Can&amp;rsquo;t you do the same thing as this tool with shell scripts?&lt;/h3>
&lt;p>Yes, you can! And if you like shell scripts, power to you!&lt;/p>
&lt;p>There&amp;rsquo;s a couple of reasons I built this out. For one, &lt;em>real&lt;/em> cross-platform support. While WSL brings Bash to Windows, it&amp;rsquo;s not most developers&amp;rsquo; primary environment. Second, I think this approach is less fragile. You can sync your user profiles file (&lt;code>~/.gitprofiles&lt;/code>) onto any mcahine and you get the same behaviour.&lt;/p>
&lt;p>In fact, since they do serve a similar purpose, we even support importing basic shell scripts into a profile using the &lt;code>gpm profile import&lt;/code> command!&lt;/p>
&lt;h3 id="why-isnt-there-a-man-page">Why isn&amp;rsquo;t there a &lt;code>man&lt;/code> page?&lt;/h3>
&lt;p>Because you&amp;rsquo;re reading the documentation! GPM is a pretty simple tool but we believe that &lt;code>man&lt;/code> pages are not the most helpful form of documentation (especially if you need to support Windows).&lt;/p>
&lt;p>More importantly, thanks to the awesome &lt;code>Spectre.Cli&lt;/code> project, you can always add &lt;code>--help&lt;/code> to get full contextual information on how to use GPM.&lt;/p>
&lt;h3 id="now-my-git-config-is-borked-and-its-all-your-fault">Now my Git config is borked and it&amp;rsquo;s all your fault!&lt;/h3>
&lt;p>Well now, that seems harsh. Git Profile Manager relies on the underlying system Git to run configuration, and will only run the config items you add to the profile.&lt;/p>
&lt;p>Even so, if things look to be a bit messed up, you can always just run &lt;code>gpm deactivate &amp;lt;profile-name&amp;gt;&lt;/code> to unset the same config values. If you&amp;rsquo;ve activated multiple profiles, deactivate them in reverse order!&lt;/p></description></item><item><title>Docs: Contributing Guide</title><link>/docs/developer/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/developer/contributing/</guid><description>
&lt;p>This is very much an active project so any and all contributions are welcome, even just finding issues!&lt;/p>
&lt;h2 id="reporting-issues">Reporting issues&lt;/h2>
&lt;p>All issues should be tracked on &lt;a href="https://github.com/agc93/git-profile-manager">GitHub&lt;/a>, with enough information to reproduce the issue.&lt;/p>
&lt;h2 id="code-contributions">Code Contributions&lt;/h2>
&lt;p>This repository is based around the Git Flow workflow, using feature branches and pull requests to manage incoming changes and fixes. Generally speaking, the process can be summarised as follows:&lt;/p>
&lt;ul>
&lt;li>Find a change or fix you want to implement&lt;/li>
&lt;li>Fork the repo&lt;/li>
&lt;li>Create a new branch named &lt;code>feature/&amp;lt;your-feature-name&amp;gt;&lt;/code> and make your changes&lt;/li>
&lt;li>Open a PR from your feature branch against the &lt;code>develop&lt;/code> branch (include the GitHub issue number for fixes)&lt;/li>
&lt;li>Success! I will provide feedback if needed, or just accept the changes directly and they should appear in the next release&lt;/li>
&lt;/ul>
&lt;h2 id="documentation">Documentation&lt;/h2>
&lt;p>This documentation should include &lt;em>Edit this page&lt;/em> and &lt;em>Create documentation issues&lt;/em> buttons in the upper right. Click them to quickly jump to the source of the current documentation, or quickly create an issue. You can then fork, branch and issue a PR just as with code contributions (see above).&lt;/p>
&lt;h2 id="license">License&lt;/h2>
&lt;p>Note that this project (and all contributions) fall under the MIT License terms.&lt;/p></description></item><item><title>Docs: Changelog</title><link>/docs/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/changelog/</guid><description>
&lt;h2 id="010">0.1.0&lt;/h2>
&lt;p>This initial release is the first full publish of the Git Profile Manager tool, never fully released.&lt;/p>
&lt;h2 id="020">0.2.0&lt;/h2>
&lt;p>This re-release is updated for .NET Core 3.1+ and the newer Spectre.Cli. This should be functionally equivalent to 0.1.0, but more reliable.&lt;/p>
&lt;p>In general terms, you need to &lt;a href="../docs/getting-started/installation/">install the tool&lt;/a>, then you can &lt;a href="../docs/getting-started/usage/">start using GPM&lt;/a>!&lt;/p></description></item></channel></rss>