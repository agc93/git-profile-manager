[{"body":"Git Profile Manager (GPM) is a simple command line application to manage “profiles” for common Git configurations. For example, if you contribute to multiple repositories or teams and are often needing to change repository-specific (or global) addresses or options.\nHistory A little history first: this tool was actually originally just intended to be a simple demo for .NET Core native packaging, but I actually quite liked the idea and built it out properly and have now decided to publish it for everyone to hopefully find useful!\nTechnology Git Profile Manager is built entirely in .NET Core, using the excellent Spectre.Cli and YamlDotNet libraries. Note that since it’s using native Git underneath you’ll need git available and on your PATH. Support for running without Git itself may come in a future release.\nGetting Started To get started, check out how to install for your platform, read the usage guide and check out the FAQ for common questions.\nContributing This utility is completely open-source and is published on GitHub. To get started contributing, check out the developer guide.\n","excerpt":"Git Profile Manager (GPM) is a simple command line application to …","ref":"/docs/introduction/","title":"Git Profile Manager"},{"body":"In general terms, you need to download GPM, install it then you’re ready to start!\nDownloading The latest release of GPM is always available from GitHub Releases. Each release is published as native packages (.rpm, .deb, etc) as well as just the binary for all supported platforms (gpm-{platform}-x64.zip).\n","excerpt":"In general terms, you need to download GPM, install it then you’re …","ref":"/docs/getting-started/","title":"Installation and Usage"},{"body":"Installing Git Profile Manager is simple and easy, and supports a huge range of platforms.\nCurrently installers are provided for: Windows 10, Ubuntu (18.04), RPM-based Linux distros and Debian/Ubuntu.\nYou can also manually install on any of the above, as well as macOS (unsupported).\n.NET Core Global Tool GPM is now also shipped as a .NET Core Global Tool. This means, you can run the following command to install GPM and the .NET Core CLI should make the gpm command available in your environment.\ndotnet tool install -g git-profile-manager Note that it’s possible (especially on non-Windows platforms) that the global .NET Core tools location is not on your PATH so you may need to manually add it (or just install GPM using one of the below methods).\nLinux Debian, Ubuntu First, you need to install some dependencies:\n# for Debian 8 apt-get install -y libicu52 libunwind8 # for Ubuntu 18.04 apt-get install -y libicu55 libunwind8 Now, just download the deb for your distro and install it with:\ndpkg -i git-profile-manager*.deb This will install the app to /usr/lib/git-profile-manager and automatically add gpm to your PATH.\nJust run gpm to get the help.\nFedora Download the rpm for Fedora and install it with:\ndnf install git-profile-manager*.rpm  Despite the naming, this package should work fine for most modern Fedora versions\n This will install the app to /usr/lib/git-profile-manager and automatically add gpm to your PATH.\nJust run gpm to get the help.\nRHEL, CentOS First, install dependencies:\nyum install -y libicu libunwind Now, download the rpm for your flavour and install it with:\nrpm -i git-profile-manager*.rpm This will install the app to /usr/lib/git-profile-manager and automatically add gpm to your PATH.\nJust run gpm to get the help.\nWindows Chocolatey users can quickly install Git Profile Manager using the git-profile-manager.install package:\nchoco install git-profile-manager.install This will install the app to the default Chocolatey location and should automatically add a gpm alias to your PATH.\n You can also download the release package, extract it somewhere and add that location to your PATH manually.\n Just run gpm to get the help.\nmacOS At this time, there is no automated install available for macOS (since building for macOS requires a Mac and I don’t have one).\nMacOS users can download the relevant archive, extract it to a directory (say /Applications/git-profile-manager for example) and add that folder to your PATH. You can then run gpm from a terminal to run the app.\n Note that the macOS version is largely untested and may be somewhat unstable. Please report issues and bugs on GitHub.\n .NET Runtime If you’re on another platform, GPM might still work! If you can install the .NET Core runtime on your system (this is bundled with the SDK if you’re on a supported OS), you should be able to use it to run GPM from the dotnet-any package. The main executable is the git-profile-manager.dll file:\ndotnet git-profile-manager.dll ","excerpt":"Installing Git Profile Manager is simple and easy, and supports a huge …","ref":"/docs/getting-started/installation/","title":"GPM Installation"},{"body":"Getting help You can always run gpm --help to get info on the top-level commands available. Note that each command also has it’s own --help option for easy assistance.\nActivate The activate command is the essential command for gpm. Activating a profile automatically applies all configuration options stored in the profile, applied to the current repository.\nYou can also add the -g or --global flag to apply a profile globally (use with care).\nExample gpm activate work-profile Deactivate Deactivate is the opposite of activate and will unset any configuration options stored in the profile. Like activate, this applies to the current repository by default, but the --global flag will unset these items globally (use with extreme caution).\nExample gpm deactivate my-oss-project Profile The profile command is used to managed saved Git profiles, and includes a number of subcommands.\nCreate Create will create a new profile. By default, this profile is blank (i.e. includes no configuration options), but you can optionally provide a source profile for GPM to duplicate.\nExample gpm profile create --from personal work Delete Delete will delete the specified profile from your saved profiles completely. By default, you will be prompted to perform this command, but this can be skipped using the --non-interactive option.\nExample gpm profile delete work-profile Edit Edit allows you to edit already existing profiles (i.e. to add new configuration options to a profile). The profile will be created if it doesn’t exist.\nConfiguration options are specified as key-value pairs, similar to git config, separated by an ‘=’ symbol. You can remove a configuration option using the --rm option\nExample gpm profile edit work-profile commit.gpgsign=true gpm profile edit work-profile gpg.signingkey=123ABCDEF --rm Export If you’d like to use your profiles outside of Git Profile Manager, you can use this option to export your profile into a file you can then copy/run/move as you see fit. The exported file is a plain text file with all the git config commands for your profile, one command per line.\nThis file can then be run (through Bash or PowerShell) or used however you like.\nExample gpm profile export work-profile command-file.txt Import The opposite operation to export, import accepts a simple command file and creates a profile from it. GPM will read through the input file and create a profile with all of the Git configuration items found in the file. As such, this can be used to import not just from exported GPM profiles, but also from simple shell scripts you may already be using.\nThe new profile will be named with the input file’s name, or this can be overriden with the --profile-name option.\n The file parsing logic in GPM is quite “dumb” so it will not, for example, process any of the logic contained in the command file.\n Example gpm profile import path/to/file.sh -n new-profile List The list command simply lists all the currently saved Git profiles (from the user’s ~/.gitprofile).\nExample gpm profile list ","excerpt":"Getting help You can always run gpm --help to get info on the …","ref":"/docs/getting-started/usage/","title":"Usage"},{"body":"What’s in a profile? Essentially a Git “profile” is just a collection of configuration key-value pairs. For example commit.gpgsign=true is a single configuration item as is user.name=\"Alistair Chapman\".\nCan multiple profiles be active? Absolutely! Since profiles are just a configuration collection, you can activate as many profiles as you want! Note that profiles you activate will overwrite any previous configuration values so start generic and go specific.\nYou can also duplicate profiles by creating a new profile and using the --from option to specify an existing profile. You can then edit your new profile without affecting the old one.\nWhere are they? GPM stores profiles in a file in your home directory called .gitprofiles. Linux and macOS users may need to show hidden files in their file manager before it’s visible.\nThis file is in YAML format and stores each profile as a named key with the configuration items included right in the file.\n If you need to perform bulk editing, you can always directly edit ~/.gitprofiles. GPM doesn’t mind.\n How do I create/edit/delete profiles? Profiles can be managed using the gpm profile command and all of its subcommands, detailed in full in the usage documentation.\n","excerpt":"What’s in a profile? Essentially a Git “profile” is just a collection …","ref":"/docs/getting-started/profiles/","title":"Profiles"},{"body":"But, why? In short, because I could.\nIn reality, this tool was originally designed as a simple example of a command-line app to demonstrate .NET Core native publishing, Docker in Cake builds and using Spectre.Cli in CLI apps. As it turns out, I found the app pretty handy and since I’d already put the work in, it made sense to publish it.\nWhat platforms are supported? Theoretically, Git Profile Manager is supported anywhere .NET Core is.\nIf you already have the .NET Core runtime (i.e. dotnet), then you can run GPM.\nEven if you don’t have .NET Core installed, we build packages for Windows, macOS, RHEL/Fedora/CentOS, and Debian/Ubuntu.\nCan’t you do the same thing as this tool with shell scripts? Yes, you can! And if you like shell scripts, power to you!\nThere’s a couple of reasons I built this out. For one, real cross-platform support. While WSL brings Bash to Windows, it’s not most developers’ primary environment. Second, I think this approach is less fragile. You can sync your user profiles file (~/.gitprofiles) onto any mcahine and you get the same behaviour.\nIn fact, since they do serve a similar purpose, we even support importing basic shell scripts into a profile using the gpm profile import command!\nWhy isn’t there a man page? Because you’re reading the documentation! GPM is a pretty simple tool but we believe that man pages are not the most helpful form of documentation (especially if you need to support Windows).\nMore importantly, thanks to the awesome Spectre.Cli project, you can always add --help to get full contextual information on how to use GPM.\nNow my Git config is borked and it’s all your fault! Well now, that seems harsh. Git Profile Manager relies on the underlying system Git to run configuration, and will only run the config items you add to the profile.\nEven so, if things look to be a bit messed up, you can always just run gpm deactivate \u003cprofile-name\u003e to unset the same config values. If you’ve activated multiple profiles, deactivate them in reverse order!\n","excerpt":"But, why? In short, because I could.\nIn reality, this tool was …","ref":"/docs/faq/","title":"Frequently Asked Questions"},{"body":"Building Building this project is super-simple, and only needs the .NET Core SDK installed: run dotnet tool restore then dotnet cake.\n The documentation is built separately at this time as it’s a temporary solution only.\n Packaging To do a complete build of the tool and build all packages, you will need to have Docker installed and available on your host (and accessible to the user running the build script). The build script will complete all the packaging steps in a series of Docker containers so this may be a slow process the first time you run it as the relevant images are pulled from the Hub.\nIntroduction GPM is a simple enough codebase that should be pretty easy to work with for veterans and beginners alike. Each of the operations (edit profile, import profile, activation/deactivation etc) is handled inside a single ICommand\u003c\u003e implementation, generally with the settings class declared inside or alongside the command class.\nThese commands are wired up using Spectre.Cli, an awesome command line parser built by Patrik Svensson.\nDependency Injection This app includes basic dependency injection support for command implementations. Simply include the types you need in the ICommand\u003c\u003e's constructor, and the app will attempt to resolve this dependency from the DI container. If not found in the DI container, it will attempt to create a new instance (default Spectre.Cli behaviour), but this will only work with a parameterless constructor.\nYou can see an example of this in the ActivateCommand command type.\nAs with any other DI-controlled app, you must register the dependency first, which is done in Program.cs before the app is started.\nHelp Information Help information is automatically generated from the attributes in the settings class, especially the CommandOption/CommandArgument attribute (in the Spectre.Cli namespace) and the Description attribute (in the System.ComponentModel namespace). The help option is always -h or --help.\nLicensing GPM is made available under an MIT License. That means all contributions will also be licensed under the MIT License and all the conditions and limitations that involves.\n","excerpt":"Building Building this project is super-simple, and only needs the …","ref":"/docs/developer/","title":"Developer Guide"},{"body":"This is very much an active project so any and all contributions are welcome, even just finding issues!\nReporting issues All issues should be tracked on GitHub, with enough information to reproduce the issue.\nCode Contributions This repository is based around the Git Flow workflow, using feature branches and pull requests to manage incoming changes and fixes. Generally speaking, the process can be summarised as follows:\n Find a change or fix you want to implement Fork the repo Create a new branch named feature/\u003cyour-feature-name\u003e and make your changes Open a PR from your feature branch against the develop branch (include the GitHub issue number for fixes) Success! I will provide feedback if needed, or just accept the changes directly and they should appear in the next release  Documentation This documentation should include Edit this page and Create documentation issues buttons in the upper right. Click them to quickly jump to the source of the current documentation, or quickly create an issue. You can then fork, branch and issue a PR just as with code contributions (see above).\nLicense Note that this project (and all contributions) fall under the MIT License terms.\n","excerpt":"This is very much an active project so any and all contributions are …","ref":"/docs/developer/contributing/","title":"Contributing Guide"},{"body":"0.1.0 This initial release is the first full publish of the Git Profile Manager tool, never fully released.\n0.2.0 This re-release is updated for .NET Core 3.1+ and the newer Spectre.Cli. This should be functionally equivalent to 0.1.0, but more reliable.\nIn general terms, you need to install the tool, then you can start using GPM!\n","excerpt":"0.1.0 This initial release is the first full publish of the Git …","ref":"/docs/changelog/","title":"Changelog"},{"body":"Introduction Git Profile Manager is a simple command line application to manage “profiles” for common Git configurations. For example, if you contribute to multiple repositories or teams and are often needing to change repository-specific (or global) addresses or options.\nUsing this documentation: Click through the links in the left sidebar to navigate the available documentation. Remember, these docs are also open-source and contributions are always welcome!\n","excerpt":"Introduction Git Profile Manager is a simple command line application …","ref":"/docs/","title":"Git Profile Manager"},{"body":"  #td-cover-block-0 { background-image: url(/background_hu30910665284931ace4f57faa1e01d828_120092_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/background_hu30910665284931ace4f57faa1e01d828_120092_1920x1080_fill_q75_catmullrom_top.jpg); } }  GPM: Basic Profile Support for Git Documentation   GitHub   Allows you to quickly apply any Git configuration options for switching between contexts and projects. Fully open-source.\n\n        Git Profile Manager (GPM) is a simple command-line tool to make switching projects or identities with Git easier. GPM lets you quickly apply any number of Git configuration commands repeatably, perfect for things like changing emails, signing keys or command behaviour when changing between projects.       Simple and Reliable Profiles are stored in easy-to-edit text files, and applied using Git itself.\nRead more …\n   Easy to Install Available as native packages for common platforms as well as single binaries so you can install it anywhere.\nRead more …\n   Contributions welcome! GPM is fully open-source and open to community contributions and fixes!\nRead more …\n     Photo by Giammarco Boscaro on Unsplash     ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/","title":"Git Profile Manager"}]